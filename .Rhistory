print(bp)
dev.off()
# new plot with colored boxes and outliers and black outlines, "Person" changed to "Analyst"
bp <- ggplot(newp, aes(x=PlotID, y=BaseDiff, fill = Analyst)) +
geom_boxplot(position=position_dodge2(width = 1, padding = 0.3), outlier.color = NA) +
geom_point(data = newp[newp$outlier.p,], aes(x=PlotID1, y=BaseDiff, col = Analyst)) +
xlab("Plot identifier") +
ylab("Distance between field and \nadjusted base locations (m)") +
coord_cartesian(ylim=c(0,8)) +
theme(
legend.position = c(0.9, 0.85),
text = element_text(size=14)
)
#bp
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/Comparison_A.tif",
compression = "lzw", width = 7, height = 5, units = "in", res = 600)
print(bp)
dev.off()
bp <- ggplot(comp, aes(x=PlotID, y=diff, group = PlotID)) +
geom_boxplot(show.legend = FALSE) +
xlab("Plot identifier") +
ylab("Distance between base locations \nfor analysts 1 and 2 (m)") +
coord_cartesian(ylim=c(0,5)) +
theme(
text = element_text(size=14)
)
#bp
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/Comparison_B.tif",
compression = "lzw", width = 7, height = 3.5, units = "in", res = 600)
print(bp)
dev.off()
# look at difference in locations for tree tops. I expected this to have smaller overall differences
# but not really the case. Overall differences for plot are smaller but still under a meter for most trees.
# Larger differences are due to mismatched trees.
bp <- ggplot(comp, aes(x=PlotID, y=diffTop, group = PlotID)) +
geom_boxplot(show.legend = FALSE) +
xlab("Plot identifier") +
ylab("Distance between top locations \nfor analysts 1 and 2 (m)") +
coord_cartesian(ylim=c(0,5)) +
theme(
text = element_text(size=14)
)
#bp
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/Comparison_C.tif",
compression = "lzw", width = 7, height = 3.5, units = "in", res = 600)
print(bp)
dev.off()
bp <- ggplot(comp, aes(x=PlotID, y=diff, group = PlotID)) +
geom_boxplot(show.legend = FALSE) +
xlab("Plot identifier") +
ylab("Distance between base locations \nfor analysts 1 and 2 (m)") +
coord_cartesian(ylim=c(0,5)) +
theme(
text = element_text(size=13)
)
#bp
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/Comparison_B.tif",
compression = "lzw", width = 7, height = 3.5, units = "in", res = 600)
print(bp)
dev.off()
# look at difference in locations for tree tops. I expected this to have smaller overall differences
# but not really the case. Overall differences for plot are smaller but still under a meter for most trees.
# Larger differences are due to mismatched trees.
bp <- ggplot(comp, aes(x=PlotID, y=diffTop, group = PlotID)) +
geom_boxplot(show.legend = FALSE) +
xlab("Plot identifier") +
ylab("Distance between top locations \nfor analysts 1 and 2 (m)") +
coord_cartesian(ylim=c(0,5)) +
theme(
text = element_text(size=13)
)
#bp
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/Comparison_C.tif",
compression = "lzw", width = 7, height = 3.5, units = "in", res = 600)
print(bp)
dev.off()
# new plot with colored boxes and outliers and black outlines, "Person" changed to "Analyst"
bp <- ggplot(newp, aes(x=PlotID, y=BaseDiff, fill = Analyst)) +
geom_boxplot(position=position_dodge2(width = 1, padding = 0.3), outlier.color = NA) +
geom_point(data = newp[newp$outlier.p,], aes(x=PlotID1, y=BaseDiff, col = Analyst)) +
xlab("Plot identifier") +
ylab("Distance between field and \nadjusted base locations (m)") +
coord_cartesian(ylim=c(0,8)) +
theme(
legend.position = c(0.9, 0.85),
text = element_text(size=13)
)
#bp
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/Comparison_A.tif",
compression = "lzw", width = 7, height = 5, units = "in", res = 600)
print(bp)
dev.off()
outputFolder <- "H:/T3_DroneLidar/Ba/Plot 37/Processing"
do3DPlot <- FALSE
PercentileData <- read.csv(paste0(outputFolder, "/TAO_GroundBiased_metrics_percentile.csv"), stringsAsFactors = FALSE)
# *****************************************************************************
# *****************************************************************************
# compute crown base height using the individual percentile data (P1,P2,P3,...)
# *****************************************************************************
# *****************************************************************************
# read the percentile data
outputFolder <- "H:/T3_DroneLidar/Ba/Plot37/Processing"
do3DPlot <- FALSE
PercentileData <- read.csv(paste0(outputFolder, "/TAO_GroundBiased_metrics_percentile.csv"), stringsAsFactors = FALSE)
# Normalize the percentile heights using the 99th percentile. Output has the object identifier (extra column at beginning).
# percentile heights start in column 4 and P99 is column 103
# normalized in this context means divided by the P99 value...not normalized relative to ground elevation
NormalizedPercentileData <- PercentileData[, 4:103] / PercentileData[, 103]
NormalizedPercentileData$Identifier <- PercentileData$Identifier
NormalizedPercentileData$Plot <- PercentileData$DataFile
NormalizedPercentileData$Label <- basename(PercentileData$DataFile)
NormalizedPercentileData$cbh <- 0.0
x <- c(1:99)
for (i in 1:nrow(PercentileData)) {
slopes <- vector()
# compute slopes
for (j in 2:99) {
x1 <- x[j - 1]
x2 <- x[j]
y1 <- NormalizedPercentileData[i, j -1]
y2 <- NormalizedPercentileData[i, j]
slope_i <- (y2-y1)/(x2-x1)
slopes <- append(slopes, slope_i)
}
# get max slope
maxSlopeIndex <- which.max(slopes)
cbhIndex <- maxSlopeIndex + 1
NormalizedPercentileData$cbh[i] <- PercentileData[i, cbhIndex + 4]
}
CBHData <- NormalizedPercentileData[, 101:104]
# write data with CBH
write.csv(CBHData, paste0(outputFolder, "/TAO_GroundBiased_CBH.csv"), row.names = FALSE)
# look at a single tree...testing
treeID <- 105
treeFile <- NormalizedPercentileData$Plot[NormalizedPercentileData$Identifier == treeID]
pts <- readLDA(treeFile, epsg = 26910)
library(fusionwrapr)
pts <- readLDA(treeFile, epsg = 26910)
# replace drive letter
substr(treeFile, 1, 2) <- "H:"
pts <- readLDA(treeFile, epsg = 26910)
# get the highest and lowest points
# these are not really the min and max for the tree as they include points close to the ground but away from the stem.
# With the bias adjusted heights, the point below the high XY should be at 0 so we may be better off just using a low
# point height of 0
highPt <- pts[which(pts$z == max(pts$z)), ]
highPt <- mean(pts$z)
lowPt <- pts[which(pts$z == min(pts$z)), ]
# function to implement cone clipping
# basic idea is to specify the XYZ for the cone point and then the slope of the sides (or angle of the cone).
# putting the point below the ground simulates a conic frustum.
coneClip <- function(
pts,
coneX,
coneY,
coneZ,
angle = 30,
inside = TRUE,
xLabel = "x",
yLabel = "y",
zLabel = "z"
) {
ipts <- pts[, c(xLabel, yLabel, zLabel)]
colnames(ipts) <- c("x", "y", "z")
# compute horizontal nd vertical distance from apex XY to each point
ipts$hdist <- sqrt((ipts$x - coneX)^2 + (ipts$y - coneY)^2)
ipts$vdist <- ipts$z - coneZ
# precompute some things
tanAngle <- tan(angle / 2 * pi / 180)
# do the clip
if (inside) {
cpts <- ipts[which(ipts$hdist <= (tanAngle * ipts$vdist)), ]
} else {
cpts <- ipts[which(ipts$hdist > (tanAngle * ipts$vdist)), ]
}
return(cpts)
}
# testing cone clipping
# we are using the ground biased points so the lowest point may be far from the tree base. Bias is done using
# the ground elevation under the high XY. This means that the small opening of the cone will be in different
# places depending on the slope. For flat areas, cone apex may be on ground but for steep areas, cone apex will
# be below ground.
clipPts <- coneClip(pts, highPt$x, highPt$y, lowPt$z - 0, angle = 15)
# get the highest and lowest points
# these are not really the min and max for the tree as they include points close to the ground but away from the stem.
# With the bias adjusted heights, the point below the high XY should be at 0 so we may be better off just using a low
# point height of 0
highPt <- pts[which(pts$z == max(pts$z)), ]
highPtMean <- mean(pts$z)
lowPt <- pts[which(pts$z == min(pts$z)), ]
# testing cone clipping
# we are using the ground biased points so the lowest point may be far from the tree base. Bias is done using
# the ground elevation under the high XY. This means that the small opening of the cone will be in different
# places depending on the slope. For flat areas, cone apex may be on ground but for steep areas, cone apex will
# be below ground.
clipPts <- coneClip(pts, highPt$x, highPt$y, lowPt$z - 0, angle = 15)
# sort by height
clipPts <- clipPts[order(clipPts$z), ]
if (do3DPlot) {
open3d()
# #plot3d(pts$x, pts$y, pts$z)
plot3d(clipPts$x, clipPts$y, clipPts$z, main = "", sub = "", ann = FALSE, axes = FALSE, xlab = "", ylab = "", zlab = "", col = rainbow(5000))
# #box3d()
# #axes3d(edges = NULL, labels = FALSE, tick = FALSE, xlab = NULL, ylab = NULL, zlab = NULL)
aspect3d("iso")
highlevel()  # To trigger display
}
library(rgl)
library(lidR)
if (do3DPlot) {
open3d()
# #plot3d(pts$x, pts$y, pts$z)
plot3d(clipPts$x, clipPts$y, clipPts$z, main = "", sub = "", ann = FALSE, axes = FALSE, xlab = "", ylab = "", zlab = "", col = rainbow(5000))
# #box3d()
# #axes3d(edges = NULL, labels = FALSE, tick = FALSE, xlab = NULL, ylab = NULL, zlab = NULL)
aspect3d("iso")
highlevel()  # To trigger display
}
do3DPlot <- TRUE
if (do3DPlot) {
open3d()
# #plot3d(pts$x, pts$y, pts$z)
plot3d(clipPts$x, clipPts$y, clipPts$z, main = "", sub = "", ann = FALSE, axes = FALSE, xlab = "", ylab = "", zlab = "", col = rainbow(5000))
# #box3d()
# #axes3d(edges = NULL, labels = FALSE, tick = FALSE, xlab = NULL, ylab = NULL, zlab = NULL)
aspect3d("iso")
highlevel()  # To trigger display
}
# *****************************************************************************
# very important!!!
# the row/column arrangement in the confusion matrix output by randomForest
# is the opposite of that output by confusionMatrix
# for the RF output, read across the rows to evaluate the classification
# but for confusionMatrix output, read down the columns to evaluate
# *****************************************************************************
allData <- read.csv("H:/T3_DroneLidar/Leaning_TreeTops_SmallCylinder_normalized_metrics_ModelTraining.csv", stringsAsFactors = FALSE)
allData$Species <- as.factor(allData$Species)
# set this flag variable if you want to use the metrics for the point clips for leaning trees that were
# created using smaller point clips around the tree locations and also accounting for tree lean as
# measured when Ally & Bob adjusted tree locations. Hopefully this set of metrics produces better
# model performance.
useLeaningTrees <- TRUE
if (useLeaningTrees) {
# drop rows with bad metrics
modelData <- modelData[modelData$Elev.stddev > 0, ]
}
# drop the min/max values for elevation because we expect these to be 0 and 3.0 or very close
# and the values should not be related to species
modelData <- modelData[, -c(2, 3)]
# produce boxplots of metrics for paper -----------------------------------
fs <- 12
ff <- "sans"
P99 <- ggplot(data = modelData, mapping = aes(x=Species, y=Elev.P99, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("99th percentile of height (m)") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.5),"cm"))
library(ggplot2)
library(gridExtra)
P99 <- ggplot(data = modelData, mapping = aes(x=Species, y=Elev.P99, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("99th percentile of height (m)") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.5),"cm"))
# do final prep of data for model tuning ----------------------------------
modelData <- allData
if (useLeaningTrees) {
# drop rows with bad metrics
modelData <- modelData[modelData$Elev.stddev > 0, ]
}
# drop the min/max values for elevation because we expect these to be 0 and 3.0 or very close
# and the values should not be related to species
modelData <- modelData[, -c(2, 3)]
# produce boxplots of metrics for paper -----------------------------------
fs <- 12
ff <- "sans"
P99 <- ggplot(data = modelData, mapping = aes(x=Species, y=Elev.P99, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("99th percentile of height (m)") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.5),"cm"))
P95 <- ggplot(data = modelData, mapping = aes(x=Species, y=Elev.P95, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("95th percentile of height (m)") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.5),"cm"))
esd <- ggplot(data = modelData, mapping = aes(x=Species, y=Elev.stddev, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("Standard deviation of height (m)") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.1),"cm"))
lSkew <- ggplot(data = modelData, mapping = aes(x=Species, y=Int.L.skewness, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  scale_x_discrete(labels = NULL) +
xlab("Species") +
ylab("L-moment skewness of intensity") +
#  xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.2),"cm"))
lKurt <- ggplot(data = modelData, mapping = aes(x=Species, y=Int.L.kurtosis, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.kurtosis"]) + median(modelData[modelData$Species == "TSHE", "Int.L.kurtosis"])) / 2, linetype="dashed", color = "black") +
#  scale_x_discrete(labels = NULL) +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.1),"cm")) +
xlab("Species") +
ylab("L-moment kurtosis of intensity")
#  xlab("")
iP60 <- ggplot(data = modelData, mapping = aes(x=Species, y=Int.P60, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("60th percentile of intensity") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.1),"cm"))
mode <- ggplot(data = modelData, mapping = aes(x=Species, y=Int.mode, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.mode"]) + median(modelData[modelData$Species == "TSHE", "Int.mode"])) / 2, linetype="dashed", color = "black") +
xlab("Species") +
ylab("Mode of intensity") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.1),"cm"))
#p <- grid.arrange(P99, P95, esd, lSkew, mode, lKurt, nrow = 2, ncol = 3)
p <- grid.arrange(P99, P95, esd, lSkew, mode, iP60, nrow = 2, ncol = 3)
# *****************************************************************************
# very important!!!
# the row/column arrangement in the confusion matrix output by randomForest
# is the opposite of that output by confusionMatrix
# for the RF output, read across the rows to evaluate the classification
# but for confusionMatrix output, read down the columns to evaluate
# *****************************************************************************
allData <- read.csv("H:/T3_DroneLidar/Leaning_TreeTops_SmallCylinder_normalized_metrics_ModelTraining.csv", stringsAsFactors = FALSE)
allData$Species <- as.factor(allData$Species)
# do final prep of data for model tuning ----------------------------------
modelData <- allData
if (useLeaningTrees) {
# drop rows with bad metrics
modelData <- modelData[modelData$Elev.stddev > 0, ]
}
# *****************************************************************************
# very important!!!
# the row/column arrangement in the confusion matrix output by randomForest
# is the opposite of that output by confusionMatrix
# for the RF output, read across the rows to evaluate the classification
# but for confusionMatrix output, read down the columns to evaluate
# *****************************************************************************
allData <- read.csv("H:/T3_DroneLidar/Leaning_TreeTops_SmallCylinder_normalized_metrics_ModelTraining.csv", stringsAsFactors = FALSE)
# *****************************************************************************
# very important!!!
# the row/column arrangement in the confusion matrix output by randomForest
# is the opposite of that output by confusionMatrix
# for the RF output, read across the rows to evaluate the classification
# but for confusionMatrix output, read down the columns to evaluate
# *****************************************************************************
allData <- read.csv("H:/T3_DroneLidar/Leaning_TreeTops_SmallCylinder_normalized_metrics_ModelTraining.csv", stringsAsFactors = FALSE)
allData$Species <- as.factor(allData$Species)
# drop row number
allData <- allData[, -1]
# do final prep of data for model tuning ----------------------------------
modelData <- allData
if (useLeaningTrees) {
# drop rows with bad metrics
modelData <- modelData[modelData$Elev.stddev > 0, ]
}
# drop the min/max values for elevation because we expect these to be 0 and 3.0 or very close
# and the values should not be related to species
modelData <- modelData[, -c(2, 3)]
fs <- 12
ff <- "sans"
P99 <- ggplot(data = modelData, mapping = aes(x=Species, y=Elev.P99, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("99th percentile of height (m)") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.5),"cm"))
P95 <- ggplot(data = modelData, mapping = aes(x=Species, y=Elev.P95, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("95th percentile of height (m)") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.5),"cm"))
esd <- ggplot(data = modelData, mapping = aes(x=Species, y=Elev.stddev, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("Standard deviation of height (m)") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.1),"cm"))
lSkew <- ggplot(data = modelData, mapping = aes(x=Species, y=Int.L.skewness, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  scale_x_discrete(labels = NULL) +
xlab("Species") +
ylab("L-moment skewness of intensity") +
#  xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.2),"cm"))
lKurt <- ggplot(data = modelData, mapping = aes(x=Species, y=Int.L.kurtosis, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.kurtosis"]) + median(modelData[modelData$Species == "TSHE", "Int.L.kurtosis"])) / 2, linetype="dashed", color = "black") +
#  scale_x_discrete(labels = NULL) +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.1),"cm")) +
xlab("Species") +
ylab("L-moment kurtosis of intensity")
#  xlab("")
iP60 <- ggplot(data = modelData, mapping = aes(x=Species, y=Int.P60, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("60th percentile of intensity") +
xlab("") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.1),"cm"))
mode <- ggplot(data = modelData, mapping = aes(x=Species, y=Int.mode, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.mode"]) + median(modelData[modelData$Species == "TSHE", "Int.mode"])) / 2, linetype="dashed", color = "black") +
xlab("Species") +
ylab("Mode of intensity") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.1),"cm"))
#p <- grid.arrange(P99, P95, esd, lSkew, mode, lKurt, nrow = 2, ncol = 3)
p <- grid.arrange(P99, P95, esd, lSkew, mode, iP60, nrow = 2, ncol = 3)
#grid.arrange(arrangeGrob(lSkew, mode, lKurt,
#            widths = c(0.333, 0.333, 0.333)),
#            nrow = 1)
p
ggsave("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/BoxPlotsMetrics.png", p)
#  xlab("")
iP60 <- ggplot(data = modelData, mapping = aes(x=Species, y=Int.P60, fill=Species)) +
geom_violin(draw_quantiles = 0.5) +
#  geom_hline(yintercept=(median(modelData[modelData$Species == "PSME", "Int.L.skewness"]) + median(modelData[modelData$Species == "TSHE", "Int.L.skewness"])) / 2, linetype="dashed", color = "black") +
#  geom_violin(draw_quantiles = c(.50), trim = FALSE) +
#  xlab("Species") +
ylab("60th percentile of intensity") +
xlab("Species") +
theme(legend.position="none", text=element_text(size=fs,  family=ff), plot.margin=unit(c(0.2,0.5,0.1,0.1),"cm"))
#p <- grid.arrange(P99, P95, esd, lSkew, mode, lKurt, nrow = 2, ncol = 3)
p <- grid.arrange(P99, P95, esd, lSkew, mode, iP60, nrow = 2, ncol = 3)
ggsave("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/BoxPlotsMetrics.png", p)
version()
?version
R.version()
R.Version()
knitr::opts_chunk$set(echo = TRUE, fig.height = 9,  fig.width = 6)
# load libraries
library(plotly)
library(webshot)
library(lidR)
library(fusionwrapr)
# DriveLetter <- "C:"
# FilePath <- "\\Temp\\"
# PercentileData <- "test_percentile.csv"
DriveLetter <- "H:"
FilePath <- "\\T3_DroneLidar\\Ba\\Plot37\\Testing\\Processing\\"
PercentileData <- "TAO_normalized_metrics_percentile.csv"
PercentileData <- "TAO_GroundBiased_metrics_percentile.csv"
# read the percentile data
PercentileData <- read.csv(paste(DriveLetter, FilePath, PercentileData, sep = ""), stringsAsFactors = FALSE)
# read the percentile data
PercentileData <- read.csv(paste(DriveLetter, FilePath, PercentileData, sep = ""), stringsAsFactors = FALSE)
FilePath <- "\\T3_DroneLidar\\Ba\\Plot37\\Processing\\"
PercentileData <- "TAO_normalized_metrics_percentile.csv"
PercentileData <- "TAO_GroundBiased_metrics_percentile.csv"
# read the percentile data
PercentileData <- read.csv(paste(DriveLetter, FilePath, PercentileData, sep = ""), stringsAsFactors = FALSE)
# percentile heights start in column 4 and P99 is column 103
NormalizedPercentileData <- PercentileData[, 4:103] / PercentileData[, 103]
NormalizedPercentileData$ProfileArea <- PercentileData$Profile.area
NormalizedPercentileData$Plot <- PercentileData$DataFile
NormalizedPercentileData$Label <- basename(PercentileData$DataFile)
install.packages("tinytex")
tinytex::install_tinytex()
View(PercentileData)
# replace drive letter
PercentileData$DataFile <- gsub("E:", "H:", PercentileData$DataFile)
View(PercentileData)
i <- 1
NormalizedPercentileData[i, "Plot"]
# load lidar data for plot
#  PlotLAS <- readLAS(NormalizedPercentileData[i, "Plot"])
PlotLAS <- readLDA(NormalizedPercentileData[i, "Plot"], type = "LAS", LASTemplate = "H:/T3_DroneLidar/Ba/Plot37/Ba_plot_37_001.laz")
View(NormalizedPercentileData)
# percentile heights start in column 4 and P99 is column 103
NormalizedPercentileData <- PercentileData[, 4:103] / PercentileData[, 103]
NormalizedPercentileData$ProfileArea <- PercentileData$Profile.area
NormalizedPercentileData$Plot <- PercentileData$DataFile
NormalizedPercentileData$Label <- basename(PercentileData$DataFile)
View(NormalizedPercentileData)
i <- 1
# load lidar data for plot
#  PlotLAS <- readLAS(NormalizedPercentileData[i, "Plot"])
PlotLAS <- readLDA(NormalizedPercentileData[i, "Plot"], type = "LAS", LASTemplate = "H:/T3_DroneLidar/Ba/Plot37/Ba_plot_37_001.laz")
str(PlotLAS)
