plotNumbers <- c("07", "08", "09", "10", "13", "14", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "31", "34", "36", "37", "42", "43", "46", "47")
plotFolders <- c(
"H:/T3_DroneLidar/Ba/Plot7"
, "H:/T3_DroneLidar/Ba/Plots8_9_36_46"
, "H:/T3_DroneLidar/Ba/Plots8_9_36_46"
, "H:/T3_DroneLidar/Ba/Plots10_47"
, "H:/T3_DroneLidar/Az/Plots13_14_23_24_43"
, "H:/T3_DroneLidar/Az/Plots13_14_23_24_43"
, "H:/T3_DroneLidar/Aa/Plots16_31"
, "H:/T3_DroneLidar/Aa/Plots17_18_26_27"
, "H:/T3_DroneLidar/Aa/Plots17_18_26_27"
, "H:/T3_DroneLidar/Da/Plot19"
, "H:/T3_DroneLidar/Da/Plots20_21_22"
, "H:/T3_DroneLidar/Da/Plots20_21_22"
, "H:/T3_DroneLidar/Da/Plots20_21_22"
, "H:/T3_DroneLidar/Az/Plots13_14_23_24_43"
, "H:/T3_DroneLidar/Az/Plots13_14_23_24_43"
, "H:/T3_DroneLidar/Dz/Plots25_42"
, "H:/T3_DroneLidar/Aa/Plots17_18_26_27"
, "H:/T3_DroneLidar/Aa/Plots17_18_26_27"
, "H:/T3_DroneLidar/Aa/Plots28_29_34"
, "H:/T3_DroneLidar/Aa/Plots28_29_34"
, "H:/T3_DroneLidar/Aa/Plots16_31"
, "H:/T3_DroneLidar/Aa/Plots28_29_34"
, "H:/T3_DroneLidar/Ba/Plots8_9_36_46"
, "H:/T3_DroneLidar/Ba/Plot37"
, "H:/T3_DroneLidar/Dz/Plots25_42"
, "H:/T3_DroneLidar/Az/Plots13_14_23_24_43"
, "H:/T3_DroneLidar/Ba/Plots8_9_36_46"
, "H:/T3_DroneLidar/Ba/Plots10_47"
)
# get plot locations
plotLoc <- plotLocations[plotLocations$GroundPlotID %in% plotNumbers, ]
# get plot locations
plotLoc <- plotLocations[plotLocations$PlotID %in% plotNumbers, ]
# start FUSION commands
unlink(paste0(outputFolder, "/DoClippingLarge.bat"))
batchFile <- paste0(outputFolder, "/DoClippingLarge.bat")
# set default behavior for commands
setGlobalCommandOptions(runCmd = FALSE, saveCmd = TRUE, echoCmd = FALSE, cmdFile = batchFile)
# make sure we have the folder for the batch file
verifyFolder(dirname(batchFile))
# set the log file and clear it
useLogFile(paste0(outputFolder, "/ClippingLarge.log"), logClear = TRUE)
# add comment
addToCommandFile("Start of clipping commands")
# build commands to clip data for plots
for (i in 1:length(plotNumbers)) {
#for (i in 1:1) {
thePlot <- which(plotLoc$GroundPlotID == plotNumbers[i])
if (length(thePlot) > 0) {
# build the folder for the point data
pointTemplate <- paste0(plotFolders[i], "/*.laz")
cat(plotNumbers[i], pointTemplate, "\n")
# clip point data for plot
ClipPlot(pointTemplate
, paste0(outputFolder, "/Plot_", plotNumbers[i], ".las")
, x = plotLoc$X[thePlot]
, y = plotLoc$Y[thePlot]
, radius = plotRadius + plotBuffer
)
# clip ground model...have to do this "manually" since ClipDtm function is not in fusionwrapr package
# 11/22/2022: ClipDTM interface was added to fusionwrapr package in Oct 2022
addToCommandFile(paste0("ClipDtm \"", plotFolders[i], "/ground/ground.dtm\" \"", outputFolder, "/Plot_", plotNumbers[i], "_ground.dtm\" ",
plotLoc$X[thePlot] - (plotRadius + plotBuffer), " ",
plotLoc$Y[thePlot] - (plotRadius + plotBuffer), " ",
plotLoc$X[thePlot] + (plotRadius + plotBuffer), " ",
plotLoc$Y[thePlot] + (plotRadius + plotBuffer)
)
, comment = FALSE
)
}
}
warnings()
useLogFile("")
# start FUSION commands
unlink(paste0(outputFolder, "/DoClippingLarge.bat"))
batchFile <- paste0(outputFolder, "/DoClippingLarge.bat")
# set default behavior for commands
setGlobalCommandOptions(runCmd = FALSE, saveCmd = TRUE, echoCmd = FALSE, cmdFile = batchFile)
# make sure we have the folder for the batch file
verifyFolder(dirname(batchFile))
# set the log file and clear it
useLogFile(paste0(outputFolder, "/ClippingLarge.log"), logClear = TRUE)
# add comment
addToCommandFile("Start of clipping commands")
# build commands to clip data for plots
for (i in 1:length(plotNumbers)) {
#for (i in 1:1) {
thePlot <- which(plotLoc$PlotID == plotNumbers[i])
if (length(thePlot) > 0) {
# build the folder for the point data
pointTemplate <- paste0(plotFolders[i], "/*.laz")
cat(plotNumbers[i], pointTemplate, "\n")
# clip point data for plot
ClipPlot(pointTemplate
, paste0(outputFolder, "/Plot_", plotNumbers[i], ".las")
, x = plotLoc$X[thePlot]
, y = plotLoc$Y[thePlot]
, radius = plotRadius + plotBuffer
)
# clip ground model...have to do this "manually" since ClipDtm function is not in fusionwrapr package
# 11/22/2022: ClipDTM interface was added to fusionwrapr package in Oct 2022
addToCommandFile(paste0("ClipDtm \"", plotFolders[i], "/ground/ground.dtm\" \"", outputFolder, "/Plot_", plotNumbers[i], "_ground.dtm\" ",
plotLoc$X[thePlot] - (plotRadius + plotBuffer), " ",
plotLoc$Y[thePlot] - (plotRadius + plotBuffer), " ",
plotLoc$X[thePlot] + (plotRadius + plotBuffer), " ",
plotLoc$Y[thePlot] + (plotRadius + plotBuffer)
)
, comment = FALSE
)
}
}
# start FUSION commands
unlink(paste0(outputFolder, "/DoClippingLarge.bat"))
batchFile <- paste0(outputFolder, "/DoClippingLarge.bat")
# set default behavior for commands
setGlobalCommandOptions(runCmd = FALSE, saveCmd = TRUE, echoCmd = FALSE, cmdFile = batchFile)
# make sure we have the folder for the batch file
verifyFolder(dirname(batchFile))
# set the log file and clear it
useLogFile(paste0(outputFolder, "/ClippingLarge.log"), logClear = TRUE)
# add comment
addToCommandFile("Start of clipping commands")
# build commands to clip data for plots
for (i in 1:length(plotNumbers)) {
#for (i in 1:1) {
thePlot <- which(plotLoc$PlotID == plotNumbers[i])
if (length(thePlot) > 0) {
# build the folder for the point data
pointTemplate <- paste0(plotFolders[i], "/*.laz")
cat(plotNumbers[i], pointTemplate, "\n")
# clip point data for plot
ClipPlot(pointTemplate
, paste0(outputFolder, "/Plot_", plotNumbers[i], ".laz")
, x = plotLoc$X[thePlot]
, y = plotLoc$Y[thePlot]
, radius = plotRadius + plotBuffer
)
# clip ground model...have to do this "manually" since ClipDtm function is not in fusionwrapr package
# 11/22/2022: ClipDTM interface was added to fusionwrapr package in Oct 2022
addToCommandFile(paste0("ClipDtm \"", plotFolders[i], "/ground/ground.dtm\" \"", outputFolder, "/Plot_", plotNumbers[i], "_ground.dtm\" ",
plotLoc$X[thePlot] - (plotRadius + plotBuffer), " ",
plotLoc$Y[thePlot] - (plotRadius + plotBuffer), " ",
plotLoc$X[thePlot] + (plotRadius + plotBuffer), " ",
plotLoc$Y[thePlot] + (plotRadius + plotBuffer)
)
, comment = FALSE
)
}
}
useLogFile("")
# run the command file
runCommandFile()
inputDataFile <- "H:/T3_DroneLidar/Leaning_TreeTops_SmallCylinder_normalized_metrics_10_25_2023.csv"
# read data
inputData <- read.csv(inputDataFile, stringsAsFactors = FALSE)
#  inputDataFile <- "H:/T3_DroneLidar/Leaning_TreeTops_SmallCylinder_normalized_metrics_10_25_2023.csv"
inputDataFile <- "extras/Leaning_TreeTops_SmallCylinder_normalized_metrics_10_25_2023.csv"
# read data
inputData <- read.csv(inputDataFile, stringsAsFactors = FALSE)
inputDataFile <- "extras/Leaning_TreeTops_SmallCylinder_normalized_metrics_10_25_2023.csv"
# read data
inputData <- read.csv(inputDataFile, stringsAsFactors = FALSE)
cat("Total number of trees for training model: ", nrow(inputData), "\n")
cat("Species summary\n")
table(inputData$Species)
cat("DBH summary\n")
summary(inputData$DBH_cm)
cat("Standard deviation DBH (cm): ", sd(inputData$DBH_cm), "\n")
hist(inputData$DBH_cm)
# verify that anomaly code is 0 and lidar visible flag is "Y"
table(inputData$Anomaly1)
table(inputData$LiDAR_visible)
# histogram of DBH
library(ggplot2)
ggplot(data = inputData, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2, cex_size = 2) +
xlab("DBH (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Douglas-fir", "Western hemlock")) +
theme(legend.position = c(0.85, 0.7),
text = element_text(size=18)
)
library(readxl)
library(ggplot2)
fieldDataFilename <- "G:/R_Stuff/ONRCDroneLidar/2021 Upland Tree.xlsx"
sheetname <- "Compiled_Data"
allTrees <- read_excel(fieldDataFilename, sheet = sheetname,
col_types = c(rep("guess", 10), "text", "guess", "guess", "guess", "guess", "text"))
allTrees$DBH_cm <- as.integer(allTrees$DBH_cm)
length(unique(allTrees$Plot_Number))
table(allTrees$Species)
summary(allTrees$DBH_cm)
ggplot(data = allTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("DBH (cm)")
# read all trees on plots covered by lidar data
fieldTrees <- read.csv(file = paste0("G:/R_Stuff/ONRCDroneLidar/", "FieldTrees.csv"), stringsAsFactors = FALSE)
cat("There are data for ", length(unique(fieldTrees$Plot_Number)), "plots\n")
cat("Species summary\n")
table(fieldTrees$Species)
# candidate trees
t <- dplyr::filter(fieldTrees, LiDAR_visible == "Y", Anomaly1 == 0 | Anomaly1 == 2)
cat("Species summary for candidate trees\n")
table(t$Species)
t <- dplyr::filter(fieldTrees, LiDAR_visible == "Y", Anomaly1 == 0)
cat("Species summary for candidate trees\n")
table(t$Species)
# visible from above
t <- dplyr::filter(fieldTrees, LiDAR_visible == "Y")
cat("Species summary for candidate trees\n")
table(t$Species)
ggplot(data = inputData, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2, cex_size = 2) +
xlab("Diameter (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Douglas-fir", "Western hemlock")) +
theme(legend.position = c(0.85, 0.7),
text = element_text(size=18)
)
p1 <- ggplot(data = inputData, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Douglas-fir", "Western hemlock")) +
theme(legend.position = c(0.21, 0.875),
text = element_text(size=18)
)
ggplot(data = allTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency")
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency")
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency") +
theme(legend.position = c(0.8, 0.875),
text = element_text(size=18)
)
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency") +
theme(legend.position = c(0.8, 0.5),
text = element_text(size=18)
)
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency") +
theme(legend.position = c(0.8, 0.6),
text = element_text(size=18)
)
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency") +
theme(legend.position = c(0.9, 0.7),
text = element_text(size=18)
)
# change species labels for UKWN and UNKN
fieldTrees$Species[fieldTrees$Species == "UKWN", ] <- "SNAG"
# change species labels for UKWN and UNKN
fieldTrees$Species[fieldTrees$Species == "UKWN"] <- "SNAG"
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency") +
theme(legend.position = c(0.9, 0.7),
text = element_text(size=18)
)
fieldTrees$Species[fieldTrees$Species == "UNKN"] <- "SNAG"
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency") +
theme(legend.position = c(0.9, 0.7),
text = element_text(size=18)
)
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
theme(legend.position = c(0.9, 0.7),
text = element_text(size=18)
)
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("A", "B", "C"))
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("A", "B", "C")) +
theme(legend.position = c(0.9, 0.7),
text = element_text(size=18)
)
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
#  scale_fill_discrete(name = "Species", labels = c("A", "B", "C")) +
theme(legend.position = c(0.9, 0.7),
text = element_text(size=18)
)
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Silver fir", "Vine maple", "Red alder", "Sitka spruce", "Douglas-fir", "Cascara buckthorn", "Snag", "Western redcedar", "Western hemlock")) +
theme(legend.position = c(0.9, 0.7),
text = element_text(size=18)
)
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Silver fir", "Vine maple", "Red alder", "Sitka spruce", "Douglas-fir", "Cascara buckthorn", "Snag", "Western redcedar", "Western hemlock")) +
theme(legend.position = c(0.8, 0.7),
text = element_text(size=18)
)
ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Silver fir", "Vine maple", "Red alder", "Sitka spruce", "Douglas-fir", "Cascara buckthorn", "Snag", "Western redcedar", "Western hemlock")) +
theme(legend.position = c(0.85, 0.7),
text = element_text(size=18)
)
p1 <- ggplot(data = inputData, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Douglas-fir", "Western hemlock")) +
theme(legend.position = c(0.21, 0.875),
text = element_text(size=18)
)
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/Species distribution.tif",
compression = "lzw", width = 6, height = 5, units = "in", res = 600)
print(p1)
dev.off()
# all trees on plots with lidar
# read all trees on plots covered by lidar data
fieldTrees <- read.csv(file = paste0("G:/R_Stuff/ONRCDroneLidar/", "FieldTrees.csv"), stringsAsFactors = FALSE)
# change species labels for UKWN and UNKN
fieldTrees$Species[fieldTrees$Species == "UKWN"] <- "SNAG"
fieldTrees$Species[fieldTrees$Species == "UNKN"] <- "SNAG"
p2 <- ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Silver fir", "Vine maple", "Red alder", "Sitka spruce", "Douglas-fir", "Cascara buckthorn", "Snag", "Western redcedar", "Western hemlock")) +
theme(legend.position = c(0.85, 0.7),
text = element_text(size=18)
)
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/ALL TREES--Species distribution.tif",
compression = "lzw", width = 6, height = 5, units = "in", res = 600)
print(p2)
dev.off()
p2 <- ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Silver fir", "Vine maple", "Red alder", "Sitka spruce", "Douglas-fir", "Cascara buckthorn", "Snag", "Western redcedar", "Western hemlock")) +
theme(legend.position = c(0.85, 0.7),
text = element_text(size=16)
)
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/ALL TREES--Species distribution.tif",
compression = "lzw", width = 6, height = 5, units = "in", res = 600)
print(p2)
dev.off()
p2 <- ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Silver fir", "Vine maple", "Red alder", "Sitka spruce", "Douglas-fir", "Cascara buckthorn", "Snag", "Western redcedar", "Western hemlock")) +
theme(legend.position = c(0.85, 0.7),
text = element_text(size=14)
)
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/ALL TREES--Species distribution.tif",
compression = "lzw", width = 6, height = 5, units = "in", res = 600)
print(p2)
dev.off()
p2 <- ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Silver fir", "Vine maple", "Red alder", "Sitka spruce", "Douglas-fir", "Cascara buckthorn", "Snag", "Western redcedar", "Western hemlock")) +
theme(legend.position = c(0.85, 0.7),
text = element_text(size=13)
)
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/ALL TREES--Species distribution.tif",
compression = "lzw", width = 6, height = 5, units = "in", res = 600)
print(p2)
dev.off()
p2 <- ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Silver fir", "Vine maple", "Red alder", "Sitka spruce", "Douglas-fir", "Cascara buckthorn", "Snag", "Western redcedar", "Western hemlock")) +
theme(legend.position = c(0.83, 0.7),
text = element_text(size=13)
)
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/ALL TREES--Species distribution.tif",
compression = "lzw", width = 6, height = 5, units = "in", res = 600)
print(p2)
dev.off()
p2 <- ggplot(data = fieldTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter at breast height (cm)") +
ylab("Frequency") +
scale_fill_discrete(name = "Species", labels = c("Silver fir", "Vine maple", "Red alder", "Sitka spruce", "Douglas-fir", "Cascara buckthorn", "Snag", "Western redcedar", "Western hemlock")) +
theme(legend.position = c(0.84, 0.7),
text = element_text(size=13)
)
tiff("G:/Bob's Stuff/Documents/FY23/Papers/DF_WH_Classification/RcodeFigures/ALL TREES--Species distribution.tif",
compression = "lzw", width = 6, height = 5, units = "in", res = 600)
print(p2)
dev.off()
cat("There are data for ", length(unique(fieldTrees$Plot_Number)), "plots\n")
cat("Species summary\n")
table(fieldTrees$Species)
cat("Total number of trees: ", nrow(fieldTrees), "\n")
cat("Number of PSME and TSHE: ", nrow(fieldTrees[fieldTrees$Species == "PSME" | fieldTrees$Species == "TSHE", ]), "\n")
table(fieldTrees$Anomaly1)
# visible from above
t <- dplyr::filter(fieldTrees, LiDAR_visible == "Y")
cat("Species summary for trees visible from above\n")
table(t$Species)
# candidate trees for matching
t <- dplyr::filter(fieldTrees, LiDAR_visible == "Y", Anomaly1 == 0)
cat("Species summary for candidate trees\n")
table(t$Species)
# read all trees on plots covered by lidar data
fieldTrees <- read.csv(file = paste0("G:/R_Stuff/ONRCDroneLidar/", "FieldTrees.csv"), stringsAsFactors = FALSE)
# height summary for all trees
cat("Height summary for all trees")
summary(fieldTrees$fvsHt)
sqrt(var(fieldTrees$fvsHt))
#psme <- dplyr::filter(fieldTrees, Species == "PSME", Anomaly1 == 0 | Anomaly1 == 2 | Anomaly1 == 6, LiDAR_visible == "Y")
#tshe <- dplyr::filter(fieldTrees, Species == "TSHE", Anomaly1 == 0 | Anomaly1 == 2 | Anomaly1 == 6, LiDAR_visible == "Y")
psme <- dplyr::filter(fieldTrees, Species == "PSME", Anomaly1 == 0 | Anomaly1 == 2, LiDAR_visible == "Y")
tshe <- dplyr::filter(fieldTrees, Species == "TSHE", Anomaly1 == 0 | Anomaly1 == 2, LiDAR_visible == "Y")
#psme <- dplyr::filter(fieldTrees, Species == "PSME", Anomaly1 == 0, LiDAR_visible == "Y")
#tshe <- dplyr::filter(fieldTrees, Species == "TSHE", Anomaly1 == 0, LiDAR_visible == "Y")
candidateTrees <- rbind(psme, tshe)
cat("Total number of candidate trees for matching: ", nrow(candidateTrees), "\n")
cat("DBH summary for candidate trees for matching:\n")
library(readxl)
library(ggplot2)
fieldDataFilename <- "G:/R_Stuff/ONRCDroneLidar/2021 Upland Tree.xlsx"
sheetname <- "Compiled_Data"
allTrees <- read_excel(fieldDataFilename, sheet = sheetname,
col_types = c(rep("guess", 10), "text", "guess", "guess", "guess", "guess", "text"))
allTrees$DBH_cm <- as.integer(allTrees$DBH_cm)
length(unique(allTrees$Plot_Number))
table(allTrees$Species)
summary(allTrees$DBH_cm)
ggplot(data = allTrees, aes(x = DBH_cm, fill = Species)) +
geom_histogram(colour = 'white', binwidth = 2) +
xlab("Diameter (cm)") +
ylab("Frequency")
# read all trees on plots covered by lidar data
fieldTrees <- read.csv(file = paste0("G:/R_Stuff/ONRCDroneLidar/", "FieldTrees.csv"), stringsAsFactors = FALSE)
# height summary for all trees
cat("Height summary for all trees")
summary(fieldTrees$fvsHt)
cat("Standard deviation")
sqrt(var(fieldTrees$fvsHt))
cat("There are data for ", length(unique(fieldTrees$Plot_Number)), "plots\n")
cat("Species summary\n")
table(fieldTrees$Species)
cat("Total number of trees: ", nrow(fieldTrees), "\n")
cat("Number of PSME and TSHE: ", nrow(fieldTrees[fieldTrees$Species == "PSME" | fieldTrees$Species == "TSHE", ]), "\n")
table(fieldTrees$Anomaly1)
# visible from above
t <- dplyr::filter(fieldTrees, LiDAR_visible == "Y")
cat("Species summary for trees visible from above\n")
table(t$Species)
# candidate trees for matching
t <- dplyr::filter(fieldTrees, LiDAR_visible == "Y", Anomaly1 == 0)
cat("Species summary for candidate trees\n")
table(t$Species)
psme <- dplyr::filter(fieldTrees, Species == "PSME", Anomaly1 == 0 | Anomaly1 == 2, LiDAR_visible == "Y")
tshe <- dplyr::filter(fieldTrees, Species == "TSHE", Anomaly1 == 0 | Anomaly1 == 2, LiDAR_visible == "Y")
#psme <- dplyr::filter(fieldTrees, Species == "PSME", Anomaly1 == 0, LiDAR_visible == "Y")
#tshe <- dplyr::filter(fieldTrees, Species == "TSHE", Anomaly1 == 0, LiDAR_visible == "Y")
candidateTrees <- rbind(psme, tshe)
cat("Total number of candidate trees for matching: ", nrow(candidateTrees), "\n")
cat("DBH summary for candidate trees for matching:\n")
summary(candidateTrees$DBH_cm)
cat("Standard deviation DBH (cm): ", sd(candidateTrees$DBH_cm), "\n")
# height summary for candidate trees
cat("Height summary for all trees")
summary(candidateTrees$fvsHt)
cat("Standard deviation")
sqrt(var(candidateTrees$fvsHt))
psme <- dplyr::filter(fieldTrees, Species == "PSME", Anomaly1 == 0, LiDAR_visible == "Y")
tshe <- dplyr::filter(fieldTrees, Species == "TSHE", Anomaly1 == 0, LiDAR_visible == "Y")
candidateTrees <- rbind(psme, tshe)
cat("Total number of candidate trees for matching: ", nrow(candidateTrees), "\n")
cat("Height summary for all trees")
summary(candidateTrees$fvsHt)
cat("Standard deviation")
sqrt(var(candidateTrees$fvsHt))
